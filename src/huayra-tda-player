#! /usr/bin/python

#
# Huayra TDA Player
# Copyright (C) 2014-2014 Huayra GNU Linux
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
#

import sys
import user
import vlc
from config import Config
from player import Player
from channel import ChannelsGuide
from PyQt4 import QtGui, QtCore
from ui import WidgetPlayer

class HuayraTDAPlayer(QtGui.QMainWindow):
    """TDA Player
    """
    def __init__(self, player, config, master=None):
        QtGui.QMainWindow.__init__(self, master)
        self.player = player
        self.config = config
        guide = ChannelsGuide()
        config.loadChannelsGuide(guide)
        self.player.setGuide(guide)
        self.setWindowTitle("Huayra TDA Player")
        self.createUI()
        self.createMediaPlayer()
        self.connect(self.player, QtCore.SIGNAL("channelChanged"), self.watch, QtCore.Qt.QueuedConnection)

    def resize(self, width, height):
        QtGui.QMainWindow.resize(self, width, height)
        self.widget.resize(width, height)

    def createUI(self):
        self.widget = WidgetPlayer()
        self.setCentralWidget(self.widget)
        self.connect(self.widget.ui.btnChannelUp, QtCore.SIGNAL("clicked()"), self.channelUp)
        self.connect(self.widget.ui.btnChannelDown, QtCore.SIGNAL("clicked()"), self.channelDown)
        exit = QtGui.QAction("&Salir", self)
        self.connect(exit, QtCore.SIGNAL("triggered()"), sys.exit)
        menubar = self.menuBar()
        filemenu = menubar.addMenu("&Archivo")
        #filemenu.addAction(scan)  
        filemenu.addSeparator()
        filemenu.addAction(exit)

    def createMediaPlayer(self):
        # creating a basic vlc instance
        self.instance = vlc.Instance()
        # creating an empty vlc media player
        self.mediaplayer = self.instance.media_player_new()
        # the media player has to be 'connected' to the QFrame
        # (otherwise a video would be displayed in it's own window)
        # this is platform specific!
        # you have to give the id of the QFrame (or similar object) to
        # vlc, different platforms have different functions for this
        if sys.platform == "linux2": # for Linux using the X Server
            self.mediaplayer.set_xwindow(self.widget.videoframe.winId())
        elif sys.platform == "win32": # for Windows
            self.mediaplayer.set_hwnd(self.widget.videoframe.winId())
        elif sys.platform == "darwin": # for MacOS
            self.mediaplayer.set_nsobject(self.widget.videoframe.winId())

    def channelUp(self):
        self.player.gotoChannelUp()

    def channelDown(self):
        self.player.gotoChannelDown()

    def watch(self, channel):
        self.mediaplayer.stop()
        self.currentChannel = channel
        # create the media
        self.media = self.instance.media_new('dvb-t://frequency=' + channel.frequency, 'program='+channel.program)
        # put the media in the media player
        self.mediaplayer.set_media(self.media)

        # parse the metadata of the file
        self.media.parse()
        # set the title of the track as window title
        self.setWindowTitle("Huayra TDA Player - " + channel.name)
        self.mediaplayer.play()

    def setVolume(self, Volume):
        """Set the volume
        """
        self.mediaplayer.audio_set_volume(Volume)

    def updateUI(self):
        """updates the user interface"""
        pass

    def start(self):
        if self.player.currentChannel() is not None:
            self.watch(self.player.currentChannel())


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    config = Config()
    guide = ChannelsGuide()
    player = Player(guide)
    ui = HuayraTDAPlayer(player, config)
    ui.show()
    ui.resize(640, 480)
    ui.start()
    sys.exit(app.exec_())
