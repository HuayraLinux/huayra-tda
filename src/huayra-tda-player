#! /usr/bin/python
# -*- coding: utf-8 -*-

#
# Huayra TDA Player
# Copyright (C) 2014-2014 Huayra GNU Linux
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
#

import sys
import user
from config import Config
from player import Player
from channel import ChannelsGuide
from scan import ChannelsScannerProcess
from PyQt4 import QtGui, QtCore
from ui import WidgetPlayer, WidgetAbout, WidgetScanChannels
import functools
import signal

signal.signal(signal.SIGINT, signal.SIG_DFL)


class HuayraTDAPlayer(QtGui.QMainWindow):
    """TDA Player
    """
    def __init__(self, player, config, channels_scanner_class, master=None):
        QtGui.QMainWindow.__init__(self, master)
        self.player = player
        self.config = config
        self.channels_scanner_class = channels_scanner_class
        guide = ChannelsGuide()
        config.loadChannelsGuide(guide)
        self.player.setGuide(guide)
        self.setWindowTitle("Huayra TDA Player")
        self.createUI()
        self.about = WidgetAbout()
        self.connect(self.playerWidget, QtCore.SIGNAL("fullscreen"), self.toggle_fullscreen)

        if config.no_config:
            self.scanChannels()

    def resize(self, width, height):
        self.playerWidget.do_resize(width, height)
        QtGui.QMainWindow.resize(self, width, height)

    def createUI(self):
        self.playerWidget = WidgetPlayer(self.player)
        self.setCentralWidget(self.playerWidget)
        exit = QtGui.QAction("&Salir", self)
        self.connect(exit, QtCore.SIGNAL("triggered()"), sys.exit)
        scan = QtGui.QAction(u"Escanear canales", self)
        self.connect(scan, QtCore.SIGNAL("triggered()"), self.scanChannels)
        menubar = self.menuBar()
        filemenu = menubar.addMenu("&Archivo")
        filemenu.addAction(scan)
        filemenu.addSeparator()
        filemenu.addAction(exit)


        opt_menu = menubar.addMenu("&Opciones")

        opt_deinterlace_submenu = opt_menu.addMenu("Desentrelazado")
        opt_deinterlace_group = QtGui.QActionGroup(opt_deinterlace_submenu, exclusive=True)

        a = opt_deinterlace_group.addAction(QtGui.QAction('Ninguno', self, checkable=True, checked=True))
        self.connect(a, QtCore.SIGNAL("triggered()"), functools.partial(self.optionsDeinterlace, None))
        opt_deinterlace_submenu.addAction(a)

        a = opt_deinterlace_group.addAction(QtGui.QAction('Blend', self, checkable=True))
        self.connect(a, QtCore.SIGNAL("triggered()"), functools.partial(self.optionsDeinterlace, 'blend'))
        opt_deinterlace_submenu.addAction(a)

        a = opt_deinterlace_group.addAction(QtGui.QAction('Linear', self, checkable=True))
        self.connect(a, QtCore.SIGNAL("triggered()"), functools.partial(self.optionsDeinterlace, 'linear'))
        opt_deinterlace_submenu.addAction(a)

        a = opt_deinterlace_group.addAction(QtGui.QAction('X', self, checkable=True))
        self.connect(a, QtCore.SIGNAL("triggered()"), functools.partial(self.optionsDeinterlace, 'x'))
        opt_deinterlace_submenu.addAction(a)

        opt_aspect_submenu = opt_menu.addMenu("Aspecto")
        opt_aspect_group = QtGui.QActionGroup(opt_aspect_submenu, exclusive=True)

        a = opt_aspect_group.addAction(QtGui.QAction('Por defecto', self, checkable=True, checked=True))
        self.connect(a, QtCore.SIGNAL("triggered()"), functools.partial(self.optionsAspect, None))
        opt_aspect_submenu.addAction(a)

        a = opt_aspect_group.addAction(QtGui.QAction('4:3', self, checkable=True))
        self.connect(a, QtCore.SIGNAL("triggered()"), functools.partial(self.optionsAspect, '4:3'))
        opt_aspect_submenu.addAction(a)

        a = opt_aspect_group.addAction(QtGui.QAction('16:9', self, checkable=True))
        self.connect(a, QtCore.SIGNAL("triggered()"), functools.partial(self.optionsAspect, '16:9'))
        opt_aspect_submenu.addAction(a)

        a = opt_aspect_group.addAction(QtGui.QAction('16:10', self, checkable=True))
        self.connect(a, QtCore.SIGNAL("triggered()"), functools.partial(self.optionsAspect, '16:10'))
        opt_aspect_submenu.addAction(a)


        helpmenu = menubar.addMenu("A&yuda")
        about = QtGui.QAction("&Acerca de Huayra TDA", self)
        self.connect(about, QtCore.SIGNAL("triggered()"), self.showAbout)
        helpmenu.addAction(about)

    def start(self):
        if self.player.currentChannel() is not None:
            self.player.gotoChannel(0)

    def showAbout(self):
        self.about.exec_()

    def optionsDeinterlace(self, option):
        self.playerWidget.setDeinterlace(option)

    def optionsAspect(self, option):
        self.playerWidget.setAspect(option)

    def toggle_fullscreen(self, fullscreen):
        if fullscreen:
            self.menuBar().hide()
            self.showFullScreen()
        else:
            self.menuBar().show()
            self.showNormal()

    def scanChannels(self):
        self.player.stop()
        self.scanWidget = WidgetScanChannels(self.channels_scanner_class, self.config)
        self.connect(self.scanWidget, QtCore.SIGNAL("back"), self.scanFinalized)
        self.setCentralWidget(self.scanWidget)

    def scanFinalized(self):
        guide = ChannelsGuide()
        self.config.loadChannelsGuide(guide)
        self.player.setGuide(guide)
        self.playerWidget = WidgetPlayer(self.player)
        self.connect(self.playerWidget, QtCore.SIGNAL("fullscreen"), self.toggle_fullscreen)
        self.setCentralWidget(self.playerWidget)
        self.start()

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    app.setWindowIcon(QtGui.QIcon('/usr/share/icons/hicolor/scalable/apps/huayra-tda-icon.svg'))
    config = Config()
    guide = ChannelsGuide()
    player = Player(guide)
    ui = HuayraTDAPlayer(player, config, ChannelsScannerProcess)
    ui.show()
    ui.resize(640, 480)
    ui.start()
    sys.exit(app.exec_())
